@using FirstTask.Handlers;

@{
	ViewBag.Title = "Реестр услуг";
	var localizer = new LocalizHandler();
}


<h2>@localizer.GetValue("HeadingServices")</h2>
<h1></h1>
<span id="allNotif"></span>

<div class="container">
	<div id="servicesGrid">
		<div id="toolbar">
			<p>@localizer.GetValue("FilterStatus")</p>
			<div id="serviceStatusesList"></div>
			<p>@localizer.GetValue("FilterSorting")</p>
			<div id="orderByTypes"></div>
			<p>@localizer.GetValue("FilterName")</p>
			<input type="text" name="Name" id="serviceNameFilter" />
			<button type="button" id="btn-search">@localizer.GetValue("ButtonSearch")</button>
		</div>
	</div>

	<div id="servicesInsertWindow">
		<form id="servicesInsertForm"></form>
	</div>

	<div id="edit-window">
		<form id="editServiceForm"></form>
	</div>

	<div>
		<div id="delete-window" style="text-align: center; display: none;">
			<h3 style="margin: 20px 0px;">@localizer.GetValue("DeleteWarningMessage")</h3>
		</div>
	</div>
</div>

<script type="text/javascript">

	$(document).ready(function () {

		var notifElement = $("#allNotif");
		notifElement.kendoNotification({
		});
		var notification = notifElement.data("kendoNotification");

		// Insert
		$("body").on("click", "#btn-insert", function () {
			let window = $("#servicesInsertWindow").data("kendoDialog");
			window.open();
		});

		$("body").on("click", "#serviceCloseInsertWindow", function () {
			$("#servicesInsertWindow").data("kendoDialog").close();
		});

		$("body").on("click", "#serviceCloseEditWindow", function () {
			$("#edit-window").data("kendoDialog").close();
		});

		$("#servicesInsertWindow").kendoDialog({
			modal: true,
			width: "400px",
			closable: true,
			visible: false,
			title: false,
		});

		var formInsert = $("#servicesInsertForm").kendoForm({
			visible: false,
			orientation: "horizontal",
			width: "100%",
			items: [
				{
					type: "group",
					label: "@localizer.GetValue("ServiceInsertFormHeader")",
					items: [
						{
							field: "Name", label: "@localizer.GetValue("LabelName")",
							editor: function (container, options) {
								var input = $('<input id="insertName" name="Name" />');
								input.appendTo(container);
								input.kendoTextBox({
									placeholder: "@localizer.GetValue("PlaceholderName")",
								});
							}
						},
						{
							field: "Price", label: "@localizer.GetValue("LabelPrice")", placeholder: "@localizer.GetValue("PlaceholderPrice")",
							editor: function (container, options) {
								var input = $('<input id="insertPrice" name="Price" />');
								input.appendTo(container);
								input.kendoNumericTextBox({
									placeholder: "Введите стоимость ",
									culture: "de-DE"
								});
							}
						},
						{
							field: "DateOfBegin", label: "@localizer.GetValue("LabelDateOfBegin")",
							editor: function (container, options) {
								var input = $('<input id="insertDate" name="DateOfBegin" />');
								input.appendTo(container);
								input.kendoDatePicker({
									format: 'dd/MM/yyyy',
								});
							}
						},
						{
							field: "Code", label: "@localizer.GetValue("LabelCode")",
							editor: function (container, options) {
								var input = $('<input id="editCode" name="Code" />');
								input.appendTo(container);
								input.kendoMaskedTextBox({
									mask: "L00.000.000"
								});
							}
						},
						{
							field: "Validator", label: "",
							editor: function (container, options) {
								var block = $('<div class="validateContainer"/>');
								block.appendTo(container);
							}
						}
					]
				}
			],
			buttonsTemplate: "<div class='form-buttons'><button class='btn-success' type='submit'>@localizer.GetValue("ButtonSave")</button> <button class='btn-danger' id='serviceCloseInsertWindow' type='button'>@localizer.GetValue("ButtonCancellation")</button></div>"
		});

		$("#servicesInsertForm").validate({
			rules: {
				Name: {
					required: true,
					minlength: 6,
				},
				Price: {
					required: true,
					maxlength: 20
				},
				DateOfBegin: {
					required: true,
					dateFilter: true,
					pastDate: true
				},
				Code: {
					required: true,
					pattern: "^[A-z]{1}[0-9]{2}.[0-9]{3}.[0-9]{3}$"
				}
			},
			messages: {
				Name: {
					required: "@localizer.GetValue("LabelName"): @localizer.GetValue("ValidationMessageInputRequired")",
					minlength: "@localizer.GetValue("LabelName"): @localizer.GetValue("ValidationMessageMinLenght") 6",
				},
				Price: {
					required: "@localizer.GetValue("LabelPrice"): @localizer.GetValue("ValidationMessageInputRequired")",
				},
				DateOfBegin: {
					required: "@localizer.GetValue("LabelDateOfBegin"): @localizer.GetValue("ValidationMessageInputRequired")",
					dateFilter: "@localizer.GetValue("LabelDateOfBegin"): @localizer.GetValue("ValidationMessageDateNonCorrect")",
					pastDate: "@localizer.GetValue("ValidationMessageDateNonCorrect")"
				},
				Code: {
					required: "@localizer.GetValue("LabelCode"): @localizer.GetValue("ValidationMessageInputRequired")",
					pattern: "@localizer.GetValue("LabelCode"): @localizer.GetValue("ValidationMessageFormatError") 'X00.000.000'"
				}
			},
			submitHandler: function () {
				var data = formInsert.serializeArray();

				$.ajax({
					url: "/Service/AddService/",
					type: "POST",
					data: data,
					success: function (json) {
						if (json.IsSuccess == true) {
							var grid = $("#servicesGrid").data("kendoGrid");
							grid.dataSource.read();
							notification.success(json.Message);
							$('#servicesInsertForm')[0].reset();
							$("#servicesInsertWindow").data("kendoDialog").close();
						}
						else
							return notification.error(json.Error);
					}
				});
			},
			focusInvalid: true,
			errorClass: "validationFormMessage",
			errorPlacement: function (error, element) {
				$(".validateContainer").empty();
				error.appendTo('.validateContainer');
			}
		});

		// Edit
		$("#edit-window").kendoDialog({
			modal: true,
			width: "500px",
			closable: true,
			visible: false,
			title: false,
		});

		var formEdit = $("#editServiceForm").kendoForm({
			visible: true,
			orientation: "horizontal",
			width: "100%",
			items: [
				{
					type: "group",
					label: "@localizer.GetValue("ServiceEditFormHeader")",
					items: [
						{
							field: "Id", label: "", editor: function (container, options) {
								var input = $('<input id="editServicesId" name="Id" type="hidden"/>');
								input.appendTo(container);
							}
						},
						{
							field: "Name", label: "@localizer.GetValue("LabelName")",
							editor: function (container, options) {
								var input = $('<input id="editServicesName" name="Name"/>');
								input.appendTo(container);
								input.kendoTextBox({
									placeholder: "@localizer.GetValue("PlaceholderName")",
								});
							}
						},
						{
							field: "Price", label: "@localizer.GetValue("LabelPrice")", placeholder: "@localizer.GetValue("PlaceholderPrice")",
							editor: function (container, options) {
								var input = $('<input id="editServicesPrice" name="Price" />');
								input.appendTo(container);
								input.kendoNumericTextBox({
									culture: "de-DE"
								});
							}
						},
						{
							field: "DateOfBegin", label: "@localizer.GetValue("LabelDateOfBegin")",
							editor: function (container, options) {
								var input = $('<input id="editServicesDateOfBegin" name="DateOfBegin" />');
								input.appendTo(container);
								input.kendoDatePicker({
									format: 'dd/MM/yyyy',
								});
							}
						},
						{
							field: "Code", label: "@localizer.GetValue("LabelCode")",
							editor: function (container, options) {
								var input = $('<input id="editServicesCode" name="Code" />');
								input.appendTo(container);
								input.kendoMaskedTextBox({
									placeholder: "Укажите код в формате 'Z00.000.000'",
									mask: "L00.000.000"
								});
							}
						},
						{
							field: "Validator", label: "",
							editor: function (container, options) {
								var block = $('<div class="validateContainer"/>');
								block.appendTo(container);
							}
						}
					]
				}
			],
			buttonsTemplate: "<div class='form-buttons'><button class='btn-success' type='submit'>Сохранить</button> <button class='btn-danger' id='serviceCloseEditWindow' type='button'>Отмена</button></div>"
		});

		// Edit Validation and Submit

		$("#editServiceForm").validate({
			rules: {
				Name: {
					required: true,
					minlength: 6,
				},
				Price: {
					required: true
				},
				DateOfBegin: {
					required: true,
					dateFilter: true,
					pastDate: true
				},
				Code: {
					required: true,
					pattern: "^[A-z]{1}[0-9]{2}.[0-9]{3}.[0-9]{3}$"
				}
			},
			messages: {
				Name: {
					required: "@localizer.GetValue("LabelName"): @localizer.GetValue("ValidationMessageInputRequired")",
					minlength: "@localizer.GetValue("LabelName"): @localizer.GetValue("ValidationMessageMinLenght") 6",
				},
				Price: {
					required: "@localizer.GetValue("LabelPrice"): @localizer.GetValue("ValidationMessageInputRequired")",
				},
				DateOfBegin: {
					required: "@localizer.GetValue("LabelDateOfBegin"): @localizer.GetValue("ValidationMessageInputRequired")",
					dateFilter: "@localizer.GetValue("LabelDateOfBegin"): @localizer.GetValue("ValidationMessageDateNonCorrect")",
					pastDate: "@localizer.GetValue("ValidationMessageDateNonCorrect")"
				},
				Code: {
					required: "@localizer.GetValue("LabelCode"): @localizer.GetValue("ValidationMessageInputRequired")",
					pattern: "@localizer.GetValue("LabelCode"): @localizer.GetValue("ValidationMessageFormatError") 'X00.000.000'"
				}
			},
			submitHandler: function () {
				var data = formEdit.serializeArray();

				$.ajax({
					url: "/Service/EditService/",
					type: "POST",
					data: data,
					success: function (json) {
						if (json.IsSuccess == true) {
							var grid = $("#servicesGrid").data("kendoGrid");
							grid.dataSource.read();
							notification.success(json.Message);
							$("#edit-window").data("kendoDialog").close();
						}
						else {
							notification.error(json.Error);
						}
					}
				});
			},
			focusInvalid: true,
			errorClass: "validationFormMessage",
			errorPlacement: function (error, element) {
				$(".validateContainer").empty();
				error.appendTo('.validateContainer');
			}
		});

		function EditService(oldService) {
			$("#editServiceForm #editServicesId").val(oldService.Id);
			$("#editServiceForm #editServicesName").val(oldService.Name);
			$("#editServiceForm #editServicesPrice").data("kendoNumericTextBox").value(oldService.Price);
			$("#editServiceForm #editServicesDateOfBegin").val(new Date().toLocaleDateString());
			$("#editServiceForm #editServicesCode").val(oldService.Code);

			$("#edit-window").data("kendoDialog").open();

			return false;
		}

		function ActivateService(id) {
			$.ajax({
				url: "/Service/ActivateService/",
				type: "POST",
				data: { id: id },
				success: function (json) {
					if (json.IsSuccess == true) {
						var grid = $("#servicesGrid").data("kendoGrid");
						grid.dataSource.read();
						notification.success(json.Message);
					}
					else {
						notification.error(json.Message);
					}
				}
			})
		}

		// Delete
		function DeleteService(id) {
			document.getElementById('delete-window').style.display = "block";
			$("#delete-window").kendoDialog({
				title: false,
				modal: true,
				width: "400px",
				closable: false,
				visible: true,
				actions: [
					{
						text: "Да",
						primary: true,
						action: function () {
							$.ajax({
								url: "/Service/DeleteService/",
								type: "POST",
								data: { id: id },
								success: function (json) {
									if (json.IsSuccess == true) {
										var grid = $("#servicesGrid").data("kendoGrid");
										grid.dataSource.read();
										notification.success(json.Message);
									}
									else {
										notification.error(json.Message);
									}
								}
							})
						}
					},
					{ text: "Нет" }
				]
			});
		};

		// Filters

		$("body").on("click", "#btn-search", function () {
			let grid = $("#servicesGrid").data("kendoGrid");
			grid.dataSource.read();
		});

		$("#toolbar").kendoToolBar({
		});
		$("#serviceNameFilter").kendoTextBox({
		});

		$("#serviceStatusesList").kendoDropDownList({
			dataTextField: "text",
			dataValueField: "value",
			dataSource: [
				{ text: "@localizer.GetValue("StatusActive")", value: 1 },
				{ text: "@localizer.GetValue("StatusDisable")", value: 2 },
			]
		});

		$("#orderByTypes").kendoDropDownList({
			dataTextField: "text",
			dataValueField: "value",
			dataSource: [
				{ text: "@localizer.GetValue("SortingByName")", value: "Name" },
				{ text: "@localizer.GetValue("SortingByPriceUp")", value: "Price" },
				{ text: "@localizer.GetValue("SortingByPriceDown")", value: "Price DESC" }
			]
		});

		// GRID

		var dataSource = new kendo.data.DataSource({
			pageSize: 20,
			transport: {
				read: {
					url: "/Service/Index",
					type: "POST",
					contentType: "application/json; charset=utf-8",
				},
				parameterMap: function (options) {
					let name = $("#serviceNameFilter").val();
					var data = {
						ServiceName: name,
						Page: options.page,
						PageSize: options.pageSize,
						Status: $("#serviceStatusesList").val(),
						SortingType: $("#orderByTypes").val()
					}
					return kendo.stringify(data);
				}
			},
			schema: {
				total: function (response) {
					if (response.length > 0)
						return response[0].TotalRows;
					else
						return 1;
				},
				model: {
					fields: {
						DateOfBegin: { type: "date" },
					}
				},
			},

			serverPaging: true,
			serverSorting: true,
		});

		$("#servicesGrid").kendoGrid({
			dataSource: dataSource,
			columns: [
				{ field: "Id", title: "Id", width: "5%", hidden: true },
				{ field: "Name", title: "@localizer.GetValue("LabelName")", width: "30%" },
				{ field: "Price", title: "@localizer.GetValue("LabelPrice")", width: "10%" },
				{ field: "Code", title: "@localizer.GetValue("LabelCode")", width: "10%" },
				{ field: "DateOfBegin", title: "@localizer.GetValue("LabelDateOfBegin")", width: "10%", format: "{0: dd-MM-yyyy}" },
				{
					field: "Status", title: "Статус", width: "5%", values: [
						{ text: "@localizer.GetValue("StatusActive")", value: 1 },
						{ text: "@localizer.GetValue("StatusDisable")", value: 2 }
					]
				},
				{
					command: [
						{
							name: "Delete",
							className: "btn-destroy",
							text: "@localizer.GetValue("ButtonDelete")",
							visible: function (dataItem) { return dataItem.Status == 1 },
							click: function (e) {
								var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
								DeleteService(dataItem.Id);
							}
						},
						{
							name: "Activate",
							className: "btn-activate",
							text: "@localizer.GetValue("ButtonActivate")",
							visible: function (dataItem) { return dataItem.Status == 2 },
							click: function (e) {
								var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
								ActivateService(dataItem.Id);
							}
						},
						{
							name: "Edit",
							className: "btn-edit",
							text: "@localizer.GetValue("ButtonEdit")",
							click: function (e) {
								var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
								EditService(dataItem);
							}
						},
					],
				},
			],
			height: 620,
			pageable: {
				messages: {
					display: '<button type="button" id="btn-insert">@localizer.GetValue("ButtonAdd")</button>'
				}
			},
			scrollable: true,
		});
	});
</script>