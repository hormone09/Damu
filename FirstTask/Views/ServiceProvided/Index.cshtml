@using FirstTask.Handlers;

@{
	var localizator = new LocalizHandler();
	ViewBag.Title = localizator.GetValue("HeadingServicesProvided");
}

<h2>@localizator.GetValue("HeadingServicesProvided")</h2>

<span id="sProvidedNotifications"></span>

<div class="container">
	<div id="providedGrid">
		<div id="sProvidedToolbar">
			<p>@localizator.GetValue("FilterStatus")</p>
			<div id="sProvidedStatusesList"></div>
			<p>@localizator.GetValue("FilterCompany")</p>
			<input type="text" id="sCompany" />
			<p>@localizator.GetValue("FilterService")</p>
			<input type="text" id="sService" />
			<p>@localizator.GetValue("FilterSorting")</p>
			<div id="sProvidedSortingTypes"></div>
			<button type="button" id="sProvidedSearchButton">@localizator.GetValue("ButtonSearch")</button>
		</div>
	</div>

	<div id="sProvidedInsertWindow">
		<form id="sProvidedInsertForm"></form>
	</div>

	<div id="editSProvidedWindow">
		<form id="editSProvidedForm"></form>
	</div>

	<div>
		<div id="sProdivdedDeleteWindow" style="text-align: center; display: none;">
			<h3 style="margin: 20px 0px;">@localizator.GetValue("DeleteWarningMessage")</h3>
		</div>
	</div>
</div>

<script type="text/javascript">
	$(document).ready(function () {
		var services = getServiceList();
		var companies = getCompanyList();

		var notifElement = $("#sProvidedNotifications");
		notifElement.kendoNotification();
		var notification = notifElement.data("kendoNotification");

		// Insert
		$("body").on("click", "#sProvidedInsertButton", function () {
			let window = $("#sProvidedInsertWindow").data("kendoDialog");
			window.open();
		});

		$("body").on("click", "#sProvidedCloseInsertWindow", function () {
			$("#sProvidedInsertWindow").data("kendoDialog").close();
		});

		$("body").on("click", "#sProvidedCloseEditWindow", function () {
			$("#editSProvidedWindow").data("kendoDialog").close();
		});

		$("#sProvidedInsertWindow").kendoDialog({
			modal: true,
			width: "400px",
			closable: false,
			visible: false,
			title: false,
		});

		$("#sProvidedInsertForm").kendoForm({
			visible: false,
			formData: {
			},
			items: [
				{
					type: "group",
					label: "@localizator.GetValue("ServiceProvidedInsertFormHeader")",
					items: [
						{
							field: "Company.Id", label: "@localizator.GetValue("LabelCompany")",
							editor: function (container, options) {
								var input = $('<input id="sProvidedInsertCompanyId" name="CompanyId"  />');
								input.appendTo(container);
								input.kendoComboBox({
									placeholder: "@localizator.GetValue("PlaceholderCompany")",
									dataTextField: "Name",
									dataValueField: "Id",
									filter: "contains",
									dataSource: companies
								});
							}
						},
						{
							field: "ServiceId", label: "@localizator.GetValue("LabelService")",
							editor: function (container, options) {
								var input = $('<input id="sProvidedInsertServiceId" name="ServiceId"  />');
								input.appendTo(container);
								input.kendoComboBox({
									placeholder: "@localizator.GetValue("PlaceholderService")",
									dataTextField: "Name",
									dataValueField: "Id",
									filter: "contains",
									dataSource: services
								});
							}
						},
						{
							field: "ServicePrice", label: "@localizator.GetValue("LabelPrice")",
							editor: function (container, options) {
								var input = $('<input id="sProvidedInsertServicePrice" name="ServicePrice" />');
								input.appendTo(container);
								input.kendoNumericTextBox({
									culture: "de-DE"
								});
							}
						},
						{
							field: "DateOfBegin", label: "@localizator.GetValue("LabelDateOfBegin")",
							editor: function (container, options) {
								var input = $('<input id="sProvidedInsertDateOfBegin" name="DateOfBegin" />');
								input.appendTo(container);
								input.kendoDatePicker({
									format: 'dd/MM/yyyy',
								});
							}
						},
						{
							field: "Validator", label: "",
							editor: function (container, options) {
								var block = $('<div class="validateContainer"/>');
								block.appendTo(container);
							}
						}
					]
				}
			],
			buttonsTemplate: "<button class='btn-success' type='submit'>@localizator.GetValue("ButtonSave")</button> <button class='btn-danger' id='sProvidedCloseInsertWindow' type='button'>@localizator.GetValue("ButtonCancellation")</button>"
		});

		$("#sProvidedInsertForm").validate({
			rules: {
				DateOfBegin: {
					required: true,
					dateFilter: true,
					pastDate: true
				}
			},
			messages: {
				DateOfBegin: {
					required: "@localizator.GetValue("LabelDateOfBegin"): @localizator.GetValue("ValidationMessageInputRequired")",
					dateFilter: "@localizator.GetValue("LabelDateOfBegin"): @localizator.GetValue("ValidationMessageFormatError") 'ДД.ММ.ГГГГ'",
					pastDate: "@localizator.GetValue("ValidationMessageDateNonCorrect")"
				},
			},
			focusInvalid: true,
			errorClass: "validationFormMessage",
			errorLabelContainer: ".validateContainer",
			submitHandler: function (e) {
				var comboBoxesIsValid = ComboBoxsValidation(["sProvidedInsertServiceId", "sProvidedInsertCompanyId"]);
				if (comboBoxesIsValid) {
					let data = {
						Company: companies.find(x => x.Id == $("#sProvidedInsertCompanyId").val()),
						Service: services.find(x => x.Id == $("#sProvidedInsertServiceId").val()),
						DateOfBegin: $("#sProvidedInsertDateOfBegin").data("kendoDatePicker").value(),
						ServicePrice: $("#sProvidedInsertServicePrice").val()
					};

					$.ajax({
						url: "/ServiceProvided/AddProvidedService/",
						type: "POST",
						contentType: "application/json; charset=utf-8",
						data: JSON.stringify(data),
						success: function (json) {
							if (json.IsSuccess == true) {
								var grid = $("#providedGrid").data("kendoGrid");
								grid.dataSource.read();
								notification.success(json.Message);
								$('#sProvidedInsertForm')[0].reset();
								$("#sProvidedInsertWindow").data("kendoDialog").close();
							}
							else
								return notification.error(json.Error);
						}
					});
				}
				else {
					notification.error("@localizator.GetValue("ValidationComboBox")");
				}
			}
		});


		// Edit
		$("#editSProvidedWindow").kendoDialog({
			modal: true,
			width: "500px",
			closable: false,
			visible: false,
			title: false,
		});

		$("#editSProvidedForm").kendoForm({
			visible: true,
			items: [
				{
					type: "group",
					label: "@localizator.GetValue("ServiceProvidedEditFormHeader")",
					items: [
						{
							field: "Id", label: "", editor: function (container, options) {
								var input = $('<input id="sProvidedEditId" name="Id" type="hidden"/>');
								input.appendTo(container);

							}
						},
						{
							field: "CompanyId", label: "@localizator.GetValue("LabelCompany")",
							editor: function (container, options) {
								var input = $('<input id="sProvidedEditCompanyId" name="CompanyId" />');
								input.appendTo(container);
								input.kendoComboBox({
									placeholder: "@localizator.GetValue("PlaceholderCompany")",
									dataTextField: "Name",
									dataValueField: "Id",
									filter: "contains",
									dataSource: companies
								});
							}
						},
						{
							field: "ServiceId", label: "@localizator.GetValue("LabelService")",
							editor: function (container, options) {
								var input = $('<input id="sProvidedEditServiceId" name="ServiceId" />');
								input.appendTo(container);
								input.kendoComboBox({
									placeholder: "@localizator.GetValue("PlaceholderService")",
									dataTextField: "Name",
									dataValueField: "Id",
									filter: "contains",
									dataSource: services
								});
							}
						},
						{
							field: "ServicePrice", label: "@localizator.GetValue("LabelPrice")",
							editor: function (container, options) {
								var input = $('<input id="sProvidedEditServicePrice" name="ServicePrice" />');
								input.appendTo(container);
								input.kendoNumericTextBox({
									culture: "de-DE"
								});
							}
						},
						{
							field: "DateOfBegin", label: "@localizator.GetValue("LabelDateOfBegin")",
							editor: function (container, options) {
								var input = $('<input id="sProvidedEditDateOfBegin" name="DateOfBegin" />');
								input.appendTo(container);
								input.kendoDatePicker({
									format: 'dd/MM/yyyy',
								});
							}
						},
					]
				}
			],
			buttonsTemplate: "<button class='btn-success' type='submit'>@localizator.GetValue("ButtonSave")</button> <button class='btn-danger' id='sProvidedCloseEditWindow' type='button'>@localizator.GetValue("ButtonCancellation")</button>"
		});

		$("#editSProvidedForm").validate({
			rules: {
				DateOfBegin: {
					required: true,
					dateFilter: true,
					pastDate: true
				}
			},
			messages: {
				DateOfBegin: {
					required: "@localizator.GetValue("LabelDateOfBegin"): @localizator.GetValue("ValidationMessageInputRequired")",
					dateFilter: "@localizator.GetValue("LabelDateOfBegin"): @localizator.GetValue("ValidationMessageFormatError") 'ДД.ММ.ГГГГ'",
					pastDate: "@localizator.GetValue("ValidationMessageDateNonCorrect")"
				},
			},
			focusInvalid: true,
			errorClass: "validationFormMessage",
			errorLabelContainer: ".validateContainer",
			submitHandler: function (e) {
				var comboBoxesIsValid = ComboBoxsValidation(["sProvidedEditCompanyId", "sProvidedEditServiceId"]);
				if (comboBoxesIsValid) {
					let data = {
						Id: $("#sProvidedEditId").val(),
						DateOfBegin: new Date($("#sProvidedEditDateOfBegin").data("kendoDatePicker").value()),
						Company: companies.find(x => x.Id == $("#sProvidedEditCompanyId").val()),
						Service: services.find(x => x.Id == $("#sProvidedEditServiceId").val()),
						ServicePrice: $("#sProvidedEditServicePrice").val()
					};

					$.ajax({
						url: "/ServiceProvided/EditProvidedService/",
						type: "POST",
						contentType: "application/json; charset=utf-8",
						data: JSON.stringify(data),
						success: function (json) {
							if (json.IsSuccess == true) {
								var grid = $("#providedGrid").data("kendoGrid");
								grid.dataSource.read();
								notification.success(json.Message);
								$("#editSProvidedWindow").data("kendoDialog").close();
							}
							else {
								notification.error(json.Error);
							}
						}
					});
				}
				else {
					notification.error("@localizator.GetValue("ValidationComboBox")");
				}
			}
		});

		function EditSProvided(oldService) {
			$("#editSProvidedForm #sProvidedEditId").val(oldService.Id);
			$("#editSProvidedForm #sProvidedEditServiceId").data("kendoComboBox").value(oldService.Service.Id);
			$("#editSProvidedForm #sProvidedEditServicePrice").data("kendoNumericTextBox").value(oldService.ServicePrice);
			$("#editSProvidedForm #sProvidedEditCompanyId").data("kendoComboBox").value(oldService.Company.Id);
			$("#editSProvidedForm #sProvidedEditDateOfBegin").val(new Date(oldService.DateOfBegin).toLocaleDateString());

			$("#editSProvidedWindow").data("kendoDialog").open();

			return false;
		}

		function ActivateSProvided(id) {
			$.ajax({
				url: "/ServiceProvided/ActivateServiceProvided/",
				type: "POST",
				data: { id: id },
				success: function (json) {
					if (json.IsSuccess == true) {
						var grid = $("#providedGrid").data("kendoGrid");
						grid.dataSource.read();
						notification.success(json.Message);
					}
					else {
						notification.error(json.Message);
					}
				}
			})
		}


		// Delete
		function DeleteSProvided(id) {
			document.getElementById('sProdivdedDeleteWindow').style.display = "block";
			$("#sProdivdedDeleteWindow").kendoDialog({
				title: false,
				modal: true,
				width: "400px",
				closable: false,
				visible: true,
				actions: [
					{
						text: "Да",
						primary: true,
						action: function () {
							$.ajax({
								url: "/ServiceProvided/DeleteProvidedService",
								type: "POST",
								data: { Id: id },
								success: function (json) {
									if (json.IsSuccess == true) {
										var grid = $("#providedGrid").data("kendoGrid");
										grid.dataSource.read();
										notification.success(json.Message);
									}
									else {
										notification.error(json.Error);
									}
								}
							})
						}
					},
					{ text: "Нет" }
				]
			});
		};


		// Filters
		$("body").on("click", "#sProvidedSearchButton", function () {
			var grid = $("#providedGrid").data("kendoGrid");
			grid.dataSource.read();
		});

		$("#sProvidedToolbar").kendoToolBar({});

		$("#sCompany").kendoComboBox({
			placeholder: "@localizator.GetValue("PlaceholderCompany")",
			dataTextField: "Name",
			dataValueField: "Id",
			filter: "contains",
			dataSource: companies,
		});

		$("#sService").kendoComboBox({
			placeholder: "@localizator.GetValue("PlaceholderService")",
			dataTextField: "Name",
			dataValueField: "Id",
			filter: "contains",
			dataSource: services,
		});

		$("#sProvidedStatusesList").kendoDropDownList({
			dataTextField: "text",
			dataValueField: "value",
			dataSource: [
				{ text: "@localizator.GetValue("StatusActive")", value: 1 },
				{ text: "@localizator.GetValue("StatusDisable")", value: 2 },
			],
		});

		$("#sProvidedSortingTypes").kendoDropDownList({
			dataTextField: "text",
			dataValueField: "value",
			dataSource: [
				{ text: "@localizator.GetValue("SortingByDateOfBegin")", value: "DateOfBegin" },
				{ text: "@localizator.GetValue("SortingByPriceUp")", value: "ServicePrice" },
				{ text: "@localizator.GetValue("SortingByPriceDown")", value: "ServicePrice DESC" },
			],
		});

		// GRID
		var dataSource = new kendo.data.DataSource({
			pageSize: 20,
			transport: {
				read: {
					url: "/ServiceProvided/Index",
					type: "POST",
					contentType: "application/json; charset=utf-8",
				},
				parameterMap: function (options) {
					var data = {
						SortingType: $("#sProvidedSortingTypes").val(),
						Page: options.page,
						PageSize: options.pageSize,
						Status: $("#sProvidedStatusesList").val(),
						CompanyId: $("#sCompany").val(),
						ServiceId: $("#sService").val()
					}
					return kendo.stringify(data);
				}
			},
			schema: {
				total: function (response) {
					if (response.length > 0)
						return response[0].TotalRows;
					else
						return 1;
				},
				model: {
					fields: {
						BirthdayDate: { type: "date" },
						DateOfBegin: { type: "date" }
					}
				}
			},
			serverPaging: true,
			serverSorting: true,
		});

		$("#providedGrid").kendoGrid({
			dataSource: dataSource,
			columns: [
				{ field: "Id", title: "Id", width: "5%", hidden: true },
				{ field: "Service.Name", title: "@localizator.GetValue("LabelService")", width: "20%" },
				{ field: "ServicePrice", title: "@localizator.GetValue("LabelPrice")", width: "15%" },
				{ field: "Company.Name", title: "@localizator.GetValue("LabelCompany")", width: "15%" },
				{ field: "DateOfBegin", title: "@localizator.GetValue("LabelDateOfBegin")", width: "10%", format: "{0: dd-MM-yyyy}" },
				{
					field: "Status", title: "Статус", width: "5%", values: [
						{ text: "@localizator.GetValue("StatusActive")", value: 1 },
						{ text: "@localizator.GetValue("StatusDisable")", value: 2 }
					]
				},

				{
					command: [
						{
							name: "Delete",
							className: "btn-destroy",
							text: "@localizator.GetValue("ButtonDelete")",
							visible: function (dataItem) { return dataItem.Status == 1 },
							click: function (e) {
								var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
								DeleteSProvided(dataItem.Id);
							},
						},
						{
							name: "Activate",
							className: "btn-activate",
							text: "@localizator.GetValue("ButtonActivate")",
							visible: function (dataItem) { return dataItem.Status == 2 },
							click: function (e) {
								var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
								ActivateSProvided(dataItem.Id);
							}
						},
						{
							name: "Edit",
							className: "btn-edit",
							text: "@localizator.GetValue("ButtonEdit")",
							click: function (e) {
								var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
								EditSProvided(dataItem);
							},
						},
					]
				},
			],
			height: 620,
			pageable: {
				messages: {
					display: '<button type="button" id="sProvidedInsertButton">@localizator.GetValue("ButtonAdd")</button>'
				}
			},
			scrollable: true,
		});
	});
</script>