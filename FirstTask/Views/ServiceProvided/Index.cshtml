@using FirstTask.Resources;

@{
	ViewBag.Title = Resource.HeadingServicesProvided;
}



<h2>@Resource.HeadingServicesProvided</h2>

<span id="serviceProvidedNotifications"></span>

<div class="container">
	<div id="serviceProvidedGrid">
		<div id="serviceProvidedToolBar">
			<p>@Resource.FilterStatus</p>
			<div id="serviceProvidedStatusesList"></div>
			<p>@Resource.FilterSorting</p>
			<div id="serviceProvidedSortingTypes" class="sorting-filter"></div>
			<p>@Resource.FilterCompany</p>
			<div id="serviceProvidedCompanyFilter" class="cmb-filter"></div>
			<p>@Resource.FilterService</p>
			<div id="serviceProvidedServiceFilter" class="cmb-filter"></div>
			<button type="button" id="serviceProvidedSearchButton">@Resource.ButtonSearch</button>
		</div>
	</div>

	<div id="serviceProvidedFormDialog" class="submit-form-dialog">
		@Html.Partial("_PartialServiceProvidedForm")
	</div>

	<div id="serviceProvidedWarningWindow" class="confirmation-block">
		<h4>@Resource.DeleteWarningMessage</h4>

		<div class="button-block">
			<button type="submit" id="serviceProvidedButtonDeleteAgree" class="btn-primary">@Resource.ButtonAgree</button>
			<button type="button" id="serviceProvidedButtonDeleteAgainst" class="btn-default">@Resource.ButtonAgainst</button>
		</div>
	</div>
</div>

<script type="text/javascript">

	$(document).ready(function () {

		var controls = {};
		controls.CurrentFieldId = {};

		$("#serviceProvidedNotifications").kendoNotification({});
		controls.Notification = $("#serviceProvidedNotifications").data("kendoNotification");

		$("#serviceProvidedFormDialog").kendoDialog({
			closable: false, visible: false, title: false, width: "900"
		});
		controls.FormDialog = $("#serviceProvidedFormDialog").data("kendoDialog");

		$("#serviceProvidedWarningWindow").kendoDialog({
			closable: false, visible: false, title: "@Resource.LabelDeleteAction"
		});
		controls.DeleteDialog = $("#serviceProvidedWarningWindow").data("kendoDialog");

		$("#serviceProvidedToolBar").kendoToolBar({});

		$("#serviceProvidedStatusesList").kendoDropDownList({
			dataTextField: "text",
			dataValueField: "value",
			dataSource: [
				{ text: "@Resource.StatusActive", value: 1 },
				{ text: "@Resource.StatusDisable", value: 2 },
			]
		});
		controls.StatusesFilter = $("#serviceProvidedStatusesList").data("kendoDropDownList");

		$("#serviceProvidedSortingTypes").kendoDropDownList({
			dataTextField: "text",
			dataValueField: "value",
			dataSource: [
				{ text: "@Resource.SortingByDateOfBegin", value: "DateOfBegin" },
				{ text: "@Resource.SortingByPriceUp", value: "ServicePrice" },
				{ text: "@Resource.SortingByPriceDown", value: "ServicePrice DESC" },
			]
		});
		controls.SortingTypeFilter = $("#serviceProvidedSortingTypes").data("kendoDropDownList");

		$("#serviceProvidedCompanyFilter").kendoComboBox({
			placeholder: "@Resource.FilterCompany",
			dataTextField: "Name",
			dataValueField: "Id",
			filter: "contains",
			dataSource: {
				serverFiltering: true,
				transport: {
					read: {
						url: "/Company/Index/",
						type: "POST",
						data: {
							CompanyName: name,
							Page: 1,
							PageSize: -1,
							Status: 0
						}
					},
				}
			}
		});
		controls.CompanyFilter = $("#serviceProvidedCompanyFilter").data("kendoComboBox");

		$("#serviceProvidedServiceFilter").kendoComboBox({
			placeholder: "@Resource.FilterService",
			dataTextField: "Name",
			dataValueField: "Id",
			filter: "contains",
			dataSource: {
				serverFiltering: true,
				transport: {
					read: {
						url: "/Service/Index/",
						type: "POST",
						data: {
							CompanyName: name,
							Page: 1,
							PageSize: -1,
							Status: 0
						}
					},
				}
			}
		});
		controls.ServiceFilter = $("#serviceProvidedServiceFilter").data("kendoComboBox");

		controls.FormHeader = $("#serviceProvidedFormTitle");

		let dataSource = new kendo.data.DataSource({
			pageSize: 20,
			transport: {
				read: {
					url: "/ServiceProvided/Index",
					type: "POST",
					contentType: "application/json; charset=utf-8",
				},
				parameterMap: function (options) {
					var data = {
						Page: options.page,
						PageSize: options.pageSize,
						Status: controls.StatusesFilter.value(),
						SortingType: controls.SortingTypeFilter.value(),
						CompanyId: controls.CompanyFilter.value(),
						ServiceId: controls.ServiceFilter.value()
					}
					return kendo.stringify(data);
				}
			},
			schema: {
				total: function (response) {
					if (response.length > 0)
						return response[0].TotalRows;
					else
						return 1;
				},
				model: {
					fields: {
						DateOfBegin: { type: "date" }
					}
				}
			},
			page: "Page",
			serverPaging: true,
			serverSorting: true,
		});

		$("#serviceProvidedGrid").kendoGrid({
			dataSource: dataSource,
			columns: [
				{ field: "Id", title: "Id", width: "1%", hidden: true },
				{ field: "Company.Id", title: "Id", width: "1%", hidden: true },
				{ field: "Service.Id", title: "Id", width: "1%", hidden: true },
				{ field: "Company.Name", title: "@Resource.LabelCompany", width: "10%" },
				{ field: "Service.Name", title: "@Resource.LabelService", width: "10%" },
				{ field: "ServicePrice", title: "@Resource.LabelPrice", width: "10%", format: "{0:n}" },
				{ field: "DateOfBegin", title: "@Resource.LabelDateOfBegin", width: "10%", format: "{0: dd.MM.yyyy}" },
				{
					field: "Status", title: "@Resource.LabelStatus", width: "5%", values: [
						{ text: "@Resource.StatusActive", value: 1 },
						{ text: "@Resource.StatusDisable", value: 2 },
					]
				},
				{
					command: [
						{
							name: "Delete",
							className: "btn-destroy",
							text: "@Resource.ButtonDelete",
							visible: function (dataItem) { return dataItem.Status == 1 },
							click: function (e) {
								var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
								controls.CurrentFieldId = dataItem.Id;
								controls.DeleteDialog.open();
							},
						},
						{
							name: "Activate",
							className: "btn-activate",
							text: "@Resource.ButtonActivate",
							visible: function (dataItem) { return dataItem.Status == 2 },
							click: function (e) {
								var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

								$.ajax({
									url: "/ServiceProvided/Activate/",
									type: "POST",
									data: { id: dataItem.Id },
									success: function (json) {
										if (json.IsSuccess == true) {
											controls.Grid.dataSource.read();
											controls.Notification.success(json.Message);
										}
										else {
											controls.Notification.error(json.Message);
										}
									}
								})
							}
						},
						{
							name: "Edit",
							className: "btn-edit",
							text: "@Resource.ButtonEdit",
							click: function (e) {
								var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
								
								$("#serviceProvidedInputId").val(dataItem.Id);
								$("#serviceProvidedInputStatus").val(dataItem.Status);
								$("#serviceProvidedCmbCompany").data("kendoComboBox").value(dataItem.Company.Id);
								$("#serviceProvidedCmbService").data("kendoComboBox").value(dataItem.Service.Id);
								$("#serviceProvidedInputPrice").data("kendoNumericTextBox").value(dataItem.ServicePrice);
								$("#serviceProvidedInputDateOfBegin").data("kendoDatePicker").value(dataItem.DateOfBegin);

								controls.FormHeader.text("@Resource.ServiceProvidedEditFormHeader");
								controls.FormDialog.open();
							},
						}
					],
					width: "13%",
				},
			],
			height: 620,
			pageable: {
				messages: {
					display: '<button type="button" id="serviceProvidedInsertButton">@Resource.ButtonAdd</button>'
				}
			},
			scrollable: true,
		});

		controls.Grid = $("#serviceProvidedGrid").data("kendoGrid");

		$("body").on("click", "#serviceProvidedInsertButton", function () {
			$("#serviceProvidedInputId").val(0);
			controls.FormHeader.text("@Resource.CompanyInsertFormHeader");
			controls.FormDialog.open();
		});

		$("body").on("click", "#serviceProvidedSearchButton", function () {
			controls.Grid.dataSource.read();
		});

		$("body").on("click", "#serviceProvidedButtonDeleteAgainst", function () {
			controls.DeleteDialog.close();
		});

		$("body").on("click", "#serviceProvidedButtonDeleteAgree", function () {
			$.ajax({
				url: "/ServiceProvided/Delete",
				type: "POST",
				data: { Id: controls.CurrentFieldId },
				success: function (json) {
					if (json.IsSuccess == true) {
						controls.Grid.dataSource.read();
						controls.DeleteDialog.close();
						controls.Notification.success(json.Message);
					}
					else {
						controls.Notification.error(json.Error);
					}
				}
			})
		});

		controls.Form = $("#serviceProvidedForm");
		controls.Form.kendoForm({
			orientation: "horizontal",
			visible: true,
			width: "100%",
			buttonsTemplate: "",
		});

		$("#serviceProvidedCmbCompany").kendoComboBox({
			placeholder: "@Resource.FilterCompany",
			dataTextField: "Name",
			dataValueField: "Id",
			filter: "contains",
			dataSource: {
				serverFiltering: true,
				transport: {
					read: {
						url: "/Company/Index/",
						type: "POST",
						data: {
							CompanyName: null,
							Page: 1,
							PageSize: -1,
							Status: 0
						}
					},
				}
			}
		});

		$("#serviceProvidedCmbService").kendoComboBox({
			placeholder: "@Resource.FilterService",
			dataTextField: "Name",
			dataValueField: "Id",
			filter: "contains",
			dataSource: {
				serverFiltering: true,
				transport: {
					read: {
						url: "/Service/Index/",
						type: "POST",
						data: {
							CompanyName: null,
							Page: 1,
							PageSize: -1,
							Status: 0
						}
					},
				}
			}
		});

		$("#serviceProvidedInputPrice").kendoNumericTextBox({
			culture: "de-DE"
		});

		$("#serviceProvidedInputDateOfBegin").kendoDatePicker({
			format: 'dd.MM.yyyy',
			culture: "ru-RU"
		});


		controls.FormValidator = $("#serviceProvidedForm").validate({
			ignore: [],
			rules: {
				Price: {
					required: true,
					maxlength: 20
				},
				Company: {
					cmbIsRequired: true
				},
				Service: {
					cmbIsRequired: true
				},
				DateOfBegin: {
					required: true,
					dateFilter: true,
					pastDate: true
				},
			},
			messages: {
				Price: {
					required: "@Resource.ValidationMessageInputRequired",
					maxlength: "@Resource.ValidationMessageMaxLenght",
				},
				Company: {
					cmbIsRequired: "@Resource.ValidationMessageInputRequired"
				},
				Service: {
					cmbIsRequired: "@Resource.ValidationMessageInputRequired"
				},
				DateOfBegin: {
						required: "@Resource.ValidationMessageInputRequired",
						dateFilter: "@Resource.ValidationMessageFormatError 'ДД.ММ.ГГГГ'",
						pastDate: "@Resource.ValidationMessageDateNonCorrect"
				}
			},
				submitHandler: function (e) {
						let cmbCompany = $("#serviceProvidedCmbCompany").data("kendoComboBox").dataItem();
						let cmbService = $("#serviceProvidedCmbService").data("kendoComboBox").dataItem();
						let currentCompanyDate = new Date(parseInt(cmbCompany.DateOfBegin.replace(/[^0-9]/g, ''))).toLocaleDateString();
						let currentServiceDate = new Date(parseInt(cmbService.DateOfBegin.replace(/[^0-9]/g, ''))).toLocaleDateString();
						let data = {
							Id: $("#serviceProvidedInputId").val(),
							Status: $("#serviceProvidedInputStatus").val(),
							ServicePrice: $("#serviceProvidedInputPrice").data("kendoNumericTextBox").value(),
							Company: { Id: cmbCompany.Id, Name: cmbCompany.Name, Phone: cmbCompany.Phone, BIN: cmbCompany.BIN, DateOfBegin: currentCompanyDate },
							Service: { Id: cmbService.Id, Name: cmbService.Name, Code: cmbService.Code, Price: cmbService.Price, DateOfBegin: currentServiceDate },
							DateOfBegin: $("#serviceProvidedInputDateOfBegin").data("kendoDatePicker").value()
						}

					if (data.Id == 0) {
						$.ajax({
							url: "/ServiceProvided/Add",
							type: "POST",
							contentType: "application/json; charset=utf-8",
							data: JSON.stringify(data),
							success: function (json) {
								if (json.IsSuccess) {
									controls.Form[0].reset();
									controls.FormDialog.close();
									controls.Notification.success(json.Message);
									controls.Grid.dataSource.read();
								}
								else {
									controls.Notification.error(json.Message);
								}
							}
						});
					}
					else {
						$.ajax({
							url: "/ServiceProvided/Edit",
							type: "POST",
							contentType: "application/json; charset=utf-8",
							data: JSON.stringify(data),
							success: function (json) {
								if (json.IsSuccess) {
									controls.Form[0].reset();
									controls.FormDialog.close();
									controls.Notification.success(json.Message);
									controls.Grid.dataSource.read();
								}
								else {
									controls.Notification.error(json.Message);
								}
							}
						});
					}
			},
			focusInvalid: true,
			errorClass: "validationFormMessage",
			errorElement: 'p',
			errorPlacement: function (error, element) {
				error.insertAfter(element.closest('div'));
			}
		});

			$("body").on("click", "#serviceProvidedFormButtonCancel", function (e) {
				controls.FormValidator.resetForm();
				controls.Form[0].reset();
			$("#serviceProvidedFormDialog").data("kendoDialog").close();
		});
	});
</script>